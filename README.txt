MyPass

A deterministic password generator, and manager. By it's nature there are
unique risks and rewards, and this software is an attempt to mitigate the
risks, and keep the rewards. But it would definitely be prudent to understand
what risks are associated with it, before deciding on whether to use it. 

 
The main advantage is having access to all of your passwords by memory, while
still having very strong pseudo random passwords for each use. This means you
do not need a database, if you can remember the *aliases* used, but the
database does offer plenty of benefits.  


The main disadvantage is, if you don't need a database to recreate the
password, an attacker doesn't either. They could attempt to brute force your
mypass password, without access to you mypass database. To mitigate this, the
entropy used to derive *alias* passwords also uses what I would call user
defined salt. The user defined salt is a questionaire about yourself. The
information is not stored in the database, but a hash of all the answers is. To
help make this more determinate, all text is capitalized, and there are
suggested formats. Most of the information asked for is not impossible to find
out about an individual, so it isn't the ultimate protection. But what it does
mean is, an attacker would have to specifically target you, know you are using
the mypass password generator, spend the time finding out the answers to the
questionaire, and brute force your main password. Definitely not impossible,
but there are lots of easier targets out there. However, if you are a high
value target, it would be worth while. I'm not a high value target, and most
aren't. But even so, it is highly recommended to use a very strong and long
master password.   


Other reasons to not use this software include, I am not an expert at
cryptography. This was a fun hobby. It is out here to review, but no one has
really reviewed it. I have written it in as safe as a manner as I know how, and
do personally believe it is secure when used appropriately, but I only know
what I know, not what I don't. This is still beta, but mostly feature complete.
Still hoping to get some suggestions, and reviews. If you don't understand
cryptography or unix in general, you may not understand all the risks
associated with using it.  But, I can whole heartidly assure you, that it is
better than using the same *poor* password for all sites, so don't do that. 


The passwords are generated by a skein hash of the *alias*, master password,
user defined salt hash. There is also an internal counter, which allows for
deprecating a generated password for the *alias*. It is a one byte counter,
which allows up to 254 deprecations.


Installing  

Installation requires the development libraries of ssl, as it uses cbc to
encrypt the database. I do not distribute the library, as it may get stale, and
it's best to have the most updated version. On Ubuntu derivitives, it can be
installed with.
  

>sudo apt-get install libssl-dev


Otherwise check with your distribution, or operating system. This is untested
on Windows, Mac, BSD's, etc, but it should build with without a lot of trouble,
if you know how to compile on your host operating system.


After you have installed the ssl libraries, it is just a matter of going to the
directory with the Makefile. 

>./setup      

>make

>sudo make install


The setup script literally just makes a directory at $HOME/.mypass, make
compiles, and make install moves the binary to /usr/local/bin


Usage  

The first action to get started is to make a new account

>mypass -n

This will initiate the questionaire, and ask for a password at the end. The
password is your master password, and the questionaire as mentioned before will
be used to add psuedo entropy to the password generator. If you enter the same
information every time, it will produce the conditions to generate the same
password for each *alias* every time.  

The master password can be passed as a flag with the -p flag. However, all
processes running, can read arguments passed to other processes. In a multi
user environment, this means another user can read your master password. So,
instead you may enter your password in a text file, in the $HOME/.mypass
directory. The filename should be called "key" and must have permissions of
User Only (700 600 400). The file will be created by default on creation of a
new database.

>mypass -a myemailaddress

This will store the *alias* "myemailaddress" in the database, and return an 18
charachter pseudo random password to standard out.  


To retreive the password again

>mypass -g myemailaddress


The long list flags can also be used.


If there are problems with the standard generated password... Incompatible
characters, not having a necessary character, the length, deprecation, etc.
There are ways to alter the output for the password. However, since you are
altering the standard output, you would also need to remember the changes you
made to the alias to remake the password without the database. So hopefully
standard works for all cases.

>mypass -g myemailaddress --length=64

This would return the full max length of the generated password, at 64
characters long. It would store the length preference in the database as well,
so further --get would return the password at length 64.

Appending a string of characters to the end of the generated password is also
possible.

>mypass -g myemailaddress --mandatory=addupto8


Would return the 64 charcter password, plus the "addupto8" string
appended to the end of it. And would also store that string in the database,
and return the same password for all further --get of that alias.

>mypass -g myemailaddress --mandatory

Would essentially append an empty string, or erase the appending characters
from the database. Due to the way arguments are parsed, optional input for
arguments must not have spaces between the flag and input. If you look at the
--help output, you will find optional input for flags in square brackets []. So
this means

>mypass -g myemailaddress -m addupto8

Would not work to append the string "addupto8", but the space does
work for the -g or --get flag.

>mypass -gmyemailaddress -maddupto8

Would work. 


So lets remove the *alias*

>mypass --remove=myemailaddress

And start over

>mypass --add=myemailaddress


We can also exclude characters. Up to 18 max. The "alphabet" of the random
password generator is 64 characters. Excluding a character will insert some of
the missing alpha characters in lieu of the excluded character(s).

>mypass --get=myemailaddress --exclude=0123456789

Will return a password with no numbers in it. It will be the same password as
before, except occurances of numbers, will be substituted for alpha characters.
Let's overwrite that change.

>mypass --get=myemailaddress --exclude

Let's say there is a breach at *myemailaddress*'s host. They recommend you
update your password, but you like using that alias.

>mypass --get=myemailaddress -d

This will increase the deprecation counter by one, and will produce a new
password. This does mean you need to know which count you are on though, in
order to reproduce the same password. The count can be viewed by

>mypass -gmyemailaddress -l 

This is the --list flag. And can be used in two contexts. With a selection or
(--get), or with none

>mypass -l

Will return a list of all *aliases*

>mypass -D1 -gmyemailaddress

Will reset the deprecation counter back to 1, where it began. Min 1 Max 254


Some other tips. 

--new or -n has an optional flag. By default it will not overwrite an existing
database. But adding a 'o' for overwrite, will let it overwrite the current
database

>mypass -no 

The -f or --file flag lets you use alternatively placed filenames and locations
of the database. It works in conjuction of all other flags. So 

>mypass -n -f/path/to/file/filename

Would create a database at that location with that filename. It will also
search in that directory for the associated "key" file that contains your
master password.

>mypass -x supersecretbitcoinpassword 

The -x or --xget flag does not add the *alias* to the database. So, if you
wanted to generate a one time password, and not store any record of it, then
use the -x flag. It still works with other flags such ass -L or --length, -D -e
-m etc... but does not store it. 

>mypass -i myoldpassword --add=alias

This will import the password "myoldpassword" into the *alias* entry "alias".
You can't alter the output of the password, but you can store it. But really
this isn't a great platform to just be used as a storing password database. So,
I don't know why you'd want to.


Further Usage

There are scripts here to make using mypass more convenient. You can use mypass
remotely if you have an ssh server, and include a gui. And you can install a
clipboard *xclip* to have the passwords generated automagically go to your
clipboard. This probably reduces some of the security, as nearly all
conveniences do. But it's there. 

>xclip.sh

Is essentially just a wrapper for piping the output into xclip. So you can run
./xclip.sh and pass all the arguments you would normally to mypass. Bash
aliasing would probably make this easier to use.

>zen_saddx.sh

and

>zen_sgetx.sh


Would need some editing to get to work. They are written specifically for the
remote server use case. But also as a template for adding a zenity or zenity
like gui. Adding a hotkey to your desktop environment to call these programs,
make them particularly convenient while browsing the interwebs. "alt a" and
"alt g" Could be a key combo to bring up a text entry to enter the *alias* and
have the output passed to xclip, without having to start a terminal session.
Also, as mentioned, you can add your ssh address to the "sshuser=" variable, to
have it call the mypass program on the ssh server, and retrieve the output back
in xclip. This way you can have a single database that is accessible remotely
to all devices you can ssh from. 

Like I said, these scripts are more of a template, cause if you don't use
gnome, or xclip. You would have to alter it to your liking.



